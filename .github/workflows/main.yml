name: Java CI with Gradle

on:
  push:
    branches: ["main"]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Copy Secrets
        env:
          OCCUPY_SECRET: ${{ secrets.OCCUPY_SECRET }}
          OCCUPY_SECRET_DIR: src/main/resources
          OCCUPY_SECRET_DIR_FILE_NAME: application.yml
        run: echo "$OCCUPY_SECRET" | base64 --decode > "$OCCUPY_SECRET_DIR/$OCCUPY_SECRET_DIR_FILE_NAME"

      - name: gradlew mod modify
        run: chmod +x gradlew

      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Spring Boot Build
        run: ./gradlew clean build --exclude-task test

      - name: Debug
        run: pwd && ls -la && (git ls-files | grep -i dockerfile || true)

      - name: docker image build
        run: docker build -t stephenyi/dnd .

      - name: docker login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: docker Hub push
        run: docker push stephenyi/dnd

      - name: get GitHub IP
        id: ip
        uses: haythem/public-ip@v1.2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Add GitHub IP to AWS
        run: aws ec2 authorize-security-group-ingress --group-id ${{ secrets.AWS_SG_ID }} --protocol tcp --port 22 --cidr ${{ steps.ip.outputs.ipv4 }}/32

      - name: AWS EC2 Connection
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          port: ${{ secrets.EC2_SSH_PORT }}
          timeout: 180s
          script: |
            set -e
            
            # 1) EC2에 application.yml 내려쓰기 (Secrets는 base64 형태라고 가정)
            mkdir -p /home/ubuntu/app/deploy
            echo "${{ secrets.OCCUPY_SECRET }}" | base64 --decode > /home/ubuntu/app/deploy/application.yml
            
            # 2) 기존 컨테이너/이미지 정리 및 최신 이미지 받기
            sudo docker stop dnd2 || true
            sudo docker rm dnd2 || true
            sudo docker rmi stephenyi/dnd || true
            sudo docker pull stephenyi/dnd
            
            # 3) 컨테이너 실행: application.yml 마운트 + 추가 로케이션 지정 + 프로파일 지정
            sudo docker run -d --name dnd2 \
              -p 8080:8080 \
              -v /home/ubuntu/app/deploy/application.yml:/application.yml:ro \
              -e SPRING_CONFIG_ADDITIONAL_LOCATION=/application.yml \
              -e SPRING_PROFILES_ACTIVE=docker \
              --restart unless-stopped \
              stephenyi/dnd
      - name: Remove IP FROM security group
        run: aws ec2 revoke-security-group-ingress --group-id ${{ secrets.AWS_SG_ID }} --protocol tcp --port 22 --cidr ${{ steps.ip.outputs.ipv4 }}/32